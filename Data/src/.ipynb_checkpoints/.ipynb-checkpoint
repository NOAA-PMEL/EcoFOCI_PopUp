{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Code and Documentation to Decode Pop-up Float (PuF) Transmitted/Recorded Data\n",
    "### A Close Look at Bottom Data (BOTDAT.TXT)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Software Requirements\n",
    "\n",
    "Developed/tested for:\n",
    "- python >=3.6 \n",
    "\n",
    "requires:\n",
    "- pyyaml >= 3.13 \n",
    "- pandas >= 0.23.4\n",
    "- numpy >= 1.15.4\n",
    "- matplotlib >= 3.0.2\n",
    "- jupyterlab >= 1.0.0 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import yaml\n",
    "import collections\n",
    "import os\n",
    "\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.dates import YearLocator, WeekdayLocator, MonthLocator, DayLocator, HourLocator, DateFormatter\n",
    "import matplotlib.ticker as ticker\n",
    "import matplotlib.dates as mdates\n",
    "from matplotlib.ticker import NullFormatter  # useful for `logit` scale\n",
    "\n",
    "import datetime\n",
    "from netCDF4 import num2date, date2num\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Structure\n",
    "\n",
    "Data downloaded from PuFs directly, generate 8 binary files.  A complete description of these files can be found at **[link]**.  Relevant pieces will be included in the notebook.\n",
    "\n",
    "Filenames:\n",
    "- BOTDAT.TXT\n",
    "- FILEPOS.TXT\n",
    "- ICEDAT.TXT\n",
    "- JPGxxxxx.JPG\n",
    "- PRODAT.TXT\n",
    "- SSTDAT.TXT\n",
    "- SUMMARY.TXT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# year deployed - year of data - imei number - site: SBD Active/Inactive \n",
    "\n",
    "# 2018 - 2019 - 300434063921240 - C2: Inactive\n",
    "# 2018 - 2019 - 300434063823800 - C10/C11: Inactive\n",
    "# 2018 - 2019 - 300434063928220 - C12: Inactive\n",
    "# 2018 - 2019 - 300434063925210 - M5: Inactive\n",
    "\n",
    "# 2019 - 2020 - 300434063470010 - S.W. of M5: Inactive\n",
    "# 2019 - 2020 - 300434063477010 - N.W. of M5: Inactive\n",
    "# 2019 - 2020 - 300434063861360 - N.E. of Saint Lawrence: Inactive\n",
    "\n",
    "#select unit and year of interest\n",
    "#imei is imei number\n",
    "imei = '300434063861360' \n",
    "year = '2020'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "instfile_dic = {'pro_file': '..//results/'+ imei +'/'+ year +'/PRODAT.TXT',\n",
    "                'ice_file': '..//results/'+ imei +'/'+ year +'/ICEDAT.TXT',\n",
    "                'bot_file': '..//results/'+ imei +'/'+ year +'/BOTDAT.TXT',\n",
    "                'sst_file': '..//results/'+ imei +'/'+ year +'/SSTDAT.TXT'}\n",
    "instconfig = '..//yaml'+'/'+ imei + '.yaml'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For each data file, we are going to read in the entire file and convert the binary to hex.  There are multiple line, lengths we are going to have to address but the start of each record is denoted by 'FFFF'.  We can split the filestring on this parameter but we need to be aware of 'FFFFF' or 'FFFFFF' posibilities"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Basic Approach***\n",
    "\n",
    "The two modules below will allow for a simple readin of the file for very simple analysis and debugging... the code of consequence that involves conversion of measurements from engineering units to science units as all defined in the PuFs CLASS in the next section"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "def HexView(file):\n",
    "    with open(file, 'rb') as in_file:\n",
    "        while True:\n",
    "            hexdata = in_file.read().hex().upper()     # Read the shortest possible line\n",
    "            if len(hexdata) == 0:                      # breaks loop once no more binary data is read\n",
    "                break\n",
    "            \n",
    "            return(hexdata.upper())\n",
    "        \n",
    "def HexSplit(hexstr):\n",
    "    if hexstr.find('FFFFF') == -1:\n",
    "        print(\"No FFFFF, proceed to split on FFFF\")\n",
    "        sample_raw = hexstr.split('FFFF')[1:]\n",
    "    else:\n",
    "        print('FFFFF found')\n",
    "        #this puts in the proper line endings but removes a variable \n",
    "        #   F from the end of each string.  Add the F string back\n",
    "        sample_raw = []\n",
    "        for substr in hexstr.split('FFFFF')[1:]: \n",
    "            sample_raw = sample_raw + (substr + 'F').split('FFFF')\n",
    "\n",
    "        sample_raw[-1] = sample_raw[-1][:-1]\n",
    "        \n",
    "    return(sample_raw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FFFFF found\n"
     ]
    }
   ],
   "source": [
    "active_file = instfile_dic['bot_file']\n",
    "\n",
    "hexstr = HexView(active_file)\n",
    "sample_raw = HexSplit(hexstr)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Class description and routine code\n",
    "\n",
    "## Decode sample data for bottom file type"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bottom Data (BOTDAT.TXT)\n",
    "\n",
    "This data has two record lengths.  17 and 19.  Since we've split on 'FFFF' and broken the record up into samples, the initial 2bytes are no longer in the record so the record lengths are now 15 and 17 (which is a string length of 30 and 34 characters)\n",
    "\n",
    "***MSG Decode Key***\n",
    "![BotDecodeMsg](decode_images/BotDat_msg_decode.png)\n",
    "\n",
    "***Engineering to Science Conversions***\n",
    "![BotDecodeMsg](decode_images/BotDat_msg_cal.png)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Defining the PopUpfloat Class\n",
    "\n",
    "import functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "preload matplotlib plot paramters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [],
   "source": [
    "### specify primary bulk figure parameters\n",
    "fontsize = 10\n",
    "labelsize = 10\n",
    "#plotstyle = 'seaborn'\n",
    "#max_xticks = 10\n",
    "plt.style.use('seaborn-ticks')\n",
    "mpl.rcParams['svg.fonttype'] = 'none'\n",
    "mpl.rcParams['ps.fonttype'] = 42 #truetype/type2 fonts instead of type3\n",
    "mpl.rcParams['pdf.fonttype'] = 42 #truetype/type2 fonts instead of type3\n",
    "mpl.rcParams['axes.grid'] = False\n",
    "mpl.rcParams['axes.edgecolor'] = 'black'\n",
    "mpl.rcParams['axes.linewidth'] = 1.5\n",
    "mpl.rcParams['axes.labelcolor'] = 'black'\n",
    "mpl.rcParams['grid.linestyle'] = '--'\n",
    "mpl.rcParams['grid.linestyle'] = '--'\n",
    "mpl.rcParams['xtick.major.size'] = 4\n",
    "mpl.rcParams['xtick.minor.size'] = 2\n",
    "mpl.rcParams['xtick.major.width'] = 2\n",
    "mpl.rcParams['xtick.minor.width'] = 0.5\n",
    "mpl.rcParams['ytick.major.size'] = 4\n",
    "mpl.rcParams['ytick.minor.size'] = 2\n",
    "mpl.rcParams['ytick.major.width'] = 2\n",
    "mpl.rcParams['ytick.minor.width'] = 0.5\n",
    "mpl.rcParams['ytick.direction'] = 'out'\n",
    "mpl.rcParams['xtick.direction'] = 'out'\n",
    "mpl.rcParams['ytick.color'] = 'black'\n",
    "mpl.rcParams['xtick.color'] = 'black'\n",
    "\n",
    "mpl.rcParams['contour.negative_linestyle'] = 'solid'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "def signed_int(hexstr):\n",
    "    '''function to convert hex string to signed int'''\n",
    "    s_int = int(hexstr,16)\n",
    "    if s_int >= 0x8000:\n",
    "        s_int -= 0x10000  \n",
    "\n",
    "    return(s_int)\n",
    "\n",
    "class PuFs(object):\n",
    "    \"\"\"Class definitions to read and Process PopUp float Data Streams\"\"\"\n",
    "\n",
    "\n",
    "    active_stream = 'bottom'\n",
    "    def __init__(self, path):\n",
    "        self.path = path\n",
    "        self.instfile_dic = {'bottom': path + '/BOTDAT.TXT',\n",
    "                             'ice': path + '/ICEDAT.TXT',\n",
    "                             'profile': path + '/PRODAT.TXT',\n",
    "                             'sst': path + '/SSTDAT.TXT'}\n",
    "    \n",
    "    def LoadCoefs(self, config_file='default.yaml'):\n",
    "        ''' Load yaml formated config file '''\n",
    "        self.config = yaml.safe_load(open(config_file))\n",
    "\n",
    "    \n",
    "    def HexView(self, active_stream='', verbose=True):\n",
    "        '''\n",
    "        input: reference to proper filepointer, options are keys \n",
    "            to the self.instfile_dic dictionary\n",
    "        '''\n",
    "        if active_stream:\n",
    "            self.active_stream = active_stream\n",
    "            \n",
    "        file = self.instfile_dic[self.active_stream]\n",
    "        with open(file, 'rb') as in_file:\n",
    "            while True:\n",
    "                hexdata = in_file.read().hex().upper()     \n",
    "                if len(hexdata) == 0:                      \n",
    "                # breaks loop once no more binary data is read\n",
    "                    break\n",
    "                self.hexstr = hexdata.upper()\n",
    "                \n",
    "                if verbose:\n",
    "                    return(hexdata.upper())\n",
    "\n",
    "    def HexSplit(self, verbose=True):\n",
    "        '''\n",
    "        input: results of HexView (inherits output)\n",
    "        '''\n",
    "        if self.hexstr.find('FFFFF') == -1:\n",
    "            print(\"No FFFFF, proceed to split on FFFF\")\n",
    "            #because in this case the first index is empty\n",
    "            sample_raw = self.hexstr.split('FFFF')[1:] \n",
    "        else:\n",
    "            print('FFFFF found')\n",
    "            #this puts in the proper line endings but removes a variable \n",
    "            #   F from the end of each string.  Add the F string back\n",
    "            sample_raw = []\n",
    "            for substr in self.hexstr.split('FFFFF'): \n",
    "                sample_raw = sample_raw + (substr + 'F').split('FFFF')\n",
    "\n",
    "            sample_raw[-1] = sample_raw[-1][:-1]\n",
    "        \n",
    "        self.sample_raw = sample_raw\n",
    "        \n",
    "        if verbose:\n",
    "            return(sample_raw)\n",
    "    \n",
    "    def Bottom(self, asPandas=False):\n",
    "        ''' Bottom is equivalent to the TimeSeriesBase'''\n",
    "        \n",
    "        if self.active_stream != 'bottom':\n",
    "            print(\"current active file is {} - can't output bottom data\".format(self.active_stream))\n",
    "            return\n",
    "\n",
    "        data = self.TimeSeriesBase()\n",
    "\n",
    "        if asPandas:\n",
    "            data = pd.DataFrame.from_dict(data,orient='index')\n",
    "        return(data)\n",
    "    \n",
    "\n",
    "    def Profile(self, asPandas=False):\n",
    "        try:\n",
    "            self.sample_raw\n",
    "        except:\n",
    "            print(\"Run PuFs.HexView and PuFs.HexSplit First\")\n",
    "            return\n",
    "\n",
    "        if self.active_stream != 'profile':\n",
    "            print(\"current active file is {} - can't output profile data\".format(self.active_stream))\n",
    "            return\n",
    "                        \n",
    "        data=collections.OrderedDict()\n",
    "\n",
    "        for sample_num, sample in enumerate(self.sample_raw):\n",
    "                        \n",
    "            if len(sample) == 22: #2byte timeword\n",
    "                \n",
    "                # unlike sst, bottom, and ice - profiles don't need to be multiplied by a sample interval\n",
    "                #seconds since 1970-01-01\n",
    "                try:\n",
    "                    time = int(sample[0:4],16)/100 + profile_starttime\n",
    "                except:\n",
    "                    time = int(sample[0:4],16)/100 + 0\n",
    "                    \n",
    "                pressure =  self.PressureConversion(int(sample[4:8],16)) \n",
    "                \n",
    "                ttp_temp_ADC = signed_int(sample[8:12])\n",
    "                ttp_temp = self.TempConversion(engr_meas=ttp_temp_ADC,\n",
    "                                                  coefA=self.config['ttp_temp_cal']['Acoef'], \n",
    "                                                  coefB=self.config['ttp_temp_cal']['Bcoef'],\n",
    "                                                  coefC=self.config['ttp_temp_cal']['Ccoef'])\n",
    "\n",
    "                rawpvalue = signed_int(sample[12:16])                  \n",
    "                par = self.PARConversion(engr_meas=rawpvalue,\n",
    "                                        coef_offset=self.config['par_cal']['offset'], \n",
    "                                        coef_slope=self.config['par_cal']['slope'])   \n",
    "\n",
    "                rawfvalue = signed_int(sample[16:20])                   \n",
    "                fluor = self.FluorConversion(engr_meas=rawfvalue,\n",
    "                                        coef_offset=self.config['fluor_cal']['offset'], \n",
    "                                        coef_slope=self.config['fluor_cal']['slope'])  \n",
    "\n",
    "                tilt = int(sample[20:22],16) #degrees\n",
    "                \n",
    "            elif len(sample) == 26: #4byte timeword, reserved for profile starttime\n",
    "                \n",
    "                #seconds since 1970-01-01\n",
    "                profile_starttime = int(sample[0:8],16)\n",
    "                \n",
    "                time = profile_starttime\n",
    "                \n",
    "                pressure =  self.PressureConversion(int(sample[8:12],16))  \n",
    "                \n",
    "                ttp_temp_ADC = signed_int(sample[12:16])\n",
    "                ttp_temp = self.TempConversion(engr_meas=ttp_temp_ADC,\n",
    "                                                  coefA=self.config['ttp_temp_cal']['Acoef'], \n",
    "                                                  coefB=self.config['ttp_temp_cal']['Bcoef'],\n",
    "                                                  coefC=self.config['ttp_temp_cal']['Ccoef'])\n",
    "                \n",
    "                rawpvalue = signed_int(sample[16:20])             \n",
    "                par = self.PARConversion(engr_meas=rawpvalue,\n",
    "                                        coef_offset=self.config['par_cal']['offset'], \n",
    "                                        coef_slope=self.config['par_cal']['slope'])  \n",
    "\n",
    "                rawfvalue = signed_int(sample[20:24])                \n",
    "                fluor = self.FluorConversion(engr_meas=rawfvalue,\n",
    "                                        coef_offset=self.config['fluor_cal']['offset'], \n",
    "                                        coef_slope=self.config['fluor_cal']['slope'])  \n",
    "\n",
    "                tilt = int(sample[24:26],16) #degrees\n",
    "            \n",
    "            elif len(sample) == 0:\n",
    "                continue\n",
    "            else:\n",
    "                continue # skip lines with too many data points\n",
    "            #save to dictionary\n",
    "            data[sample_num] = {'time':time,\n",
    "                                'pressure':pressure,\n",
    "                                'ttp_temp':ttp_temp,\n",
    "                                'ttp_temp_ADC':ttp_temp_ADC,\n",
    "                                'par':par,\n",
    "                                'fluor':fluor,\n",
    "                                'tilt':tilt}        \n",
    "        \n",
    "        if asPandas:\n",
    "            data = pd.DataFrame.from_dict(data,orient='index')\n",
    "        return(data)\n",
    "        \n",
    "    def Ice(self, asPandas=False):\n",
    "        ''' Ice is equivalent to the TimeSeriesBase'''\n",
    "\n",
    "        if self.active_stream != 'ice':\n",
    "            print(\"current active file is {} - can't output ice data\".format(self.active_stream))\n",
    "            return\n",
    "\n",
    "        data = self.TimeSeriesBase()\n",
    "\n",
    "        if asPandas:\n",
    "            data = pd.DataFrame.from_dict(data,orient='index')\n",
    "        return(data)\n",
    "    \n",
    "    def SST(self, asPandas=False):\n",
    "        ''' SST is equivalent to the TimeSeriesBase + GPS information'''\n",
    "        \n",
    "        if self.active_stream != 'sst':\n",
    "            print(\"current active file is {} - can't output sst data\".format(self.active_stream))\n",
    "            return\n",
    "\n",
    "        data = self.TimeSeriesBase()\n",
    "\n",
    "\n",
    "        for sample_num, sample in enumerate(self.sample_raw):\n",
    "\n",
    "            if (len(sample) == 30) or (len(sample) == 66): #2byte timeword, no TTS (w and w/o gps)\n",
    "                TTS = np.nan\n",
    "                if len(sample) == 66:\n",
    "                    print(\"analyze GPS\")\n",
    "                    gps_data = self.GPSSeriesBase(sample_num, sample, empty=False)\n",
    "                else:\n",
    "                    gps_data = self.GPSSeriesBase(sample_num, sample, empty=True)\n",
    "\n",
    "            elif (len(sample) == 32) or (len(sample) == 68): #2byte timeword, yes TTS (w and w/o gps)\n",
    "                TTS = int(sample[30:32],16)\n",
    "                if len(sample) == 68:\n",
    "                    gps_data = self.GPSSeriesBase(sample_num, sample, offset=2, empty=False)\n",
    "                else:\n",
    "                    gps_data = self.GPSSeriesBase(sample_num, sample, empty=True)\n",
    "\n",
    "            elif (len(sample) == 34) or (len(sample) == 70): #4byte timeword, no TTS (w and w/o gps)\n",
    "                TTS = np.nan\n",
    "                if len(sample) == 70:\n",
    "                    gps_data = self.GPSSeriesBase(sample_num, sample, offset=4, empty=False)\n",
    "                else:\n",
    "                    gps_data = self.GPSSeriesBase(sample_num, sample, empty=True)\n",
    "\n",
    "            elif (len(sample) == 36) or (len(sample) == 72): #4byte timeword, yes TTS (w and w/o gps)\n",
    "                TTS = int(sample[30:32],16)\n",
    "                if len(sample) == 72:\n",
    "                    gps_data = self.GPSSeriesBase(sample_num, sample, offset=6, empty=False)\n",
    "                else:\n",
    "                    gps_data = self.GPSSeriesBase(sample_num, sample, empty=True)\n",
    "\n",
    "            elif len(sample) == 0:\n",
    "                continue\n",
    "            else:\n",
    "                continue # skip lines with too many data points\n",
    "            #save to dictionary\n",
    "\n",
    "            try:\n",
    "                data[sample_num].update({'TTS':TTS})        \n",
    "                data[sample_num].update(gps_data[sample_num])\n",
    "            except:\n",
    "                pass\n",
    "\n",
    "        if asPandas:\n",
    "            return(pd.DataFrame.from_dict(data,orient='index'))\n",
    "        else:\n",
    "            return(data)\n",
    "\n",
    "\n",
    "    ### The folowing BASE functions are for convenience for reading and coding.  All redundant\n",
    "    # pattern reads are below.  The only challenge is that each BASE function reads the entire hex\n",
    "    # string (non-issue for files of size we expect)\n",
    "    def GPSSeriesBase(self,sample_num, sample, offset=0, empty=True):\n",
    "        '''SST only, the last 18 bytes are the same format:\n",
    "         GPSLat, GPSLon, GPSDate, GPSTime, TTF, Max_Tilt\n",
    "         Regardless of whether TTS or longdates are used.  This subroutine returns the \n",
    "         GPS dictionary based on a byte offset given the record length\n",
    "\n",
    "         Passing empty=True sends missing data back for GPS Data'''\n",
    "        data=collections.OrderedDict()\n",
    "\n",
    "        if not empty:\n",
    "            GPSLat = int(sample[30+offset:38+offset],16)/1000000\n",
    "            GPSLon = (int(sample[38+offset:46+offset],16)- 4294967295) / 1000000\n",
    "            GPSDate = int(sample[46+offset:54+offset],16)\n",
    "            GPSTime = int(sample[54+offset:62+offset],16)\n",
    "            TTF = int(sample[62+offset:64+offset],16)\n",
    "            Max_Tilt = int(sample[62+offset:66+offset],16)   \n",
    "\n",
    "        else:\n",
    "            GPSLat = GPSLon = GPSDate = GPSTime = TTF = Max_Tilt = np.nan \n",
    "            \n",
    "        #save to dictionary\n",
    "        data[sample_num] = {'GPSLat':GPSLat,\n",
    "                            'GPSLon':GPSLon,\n",
    "                            'GPSDate':GPSDate,\n",
    "                            'GPSTime':GPSTime,\n",
    "                            'TTF':TTF,\n",
    "                            'Max_Tilt':Max_Tilt}  \n",
    "            \n",
    "        return(data)   \n",
    "\n",
    "    def TimeSeriesBase(self):\n",
    "        '''Bottom, Ice, and SST all have the same base transmission information,\n",
    "            e.g. the first 17 bytes (short time stamp) / 19 bytes (long time stamp)\n",
    "            are the same.  Each of the the appropriate modules will call this communal module\n",
    "            first.\n",
    "\n",
    "            Bottom and Ice don't report any additional information beyond the base info so \n",
    "            they are essential decorators/wrappers for this function\n",
    "\n",
    "            Returns: Dictionary'''\n",
    "        try:\n",
    "            self.sample_raw\n",
    "        except:\n",
    "            print(\"Run PuFs.HexView and PuFs.HexSplit First\")\n",
    "            return\n",
    "\n",
    "        data=collections.OrderedDict()\n",
    "\n",
    "        for sample_num, sample in enumerate(self.sample_raw):\n",
    "            \n",
    "            #record length conditionals are due to number of varying outputs\n",
    "            #SST dominates the number of options due to:\n",
    "            # 2byte timeword, no TTS, no GPS (30)\n",
    "            # 4byte timeword, yes TTS, yes GPS (72)\n",
    "            #  and every permutation of the three functions\n",
    "            if ((len(sample) == 30) or (len(sample) == 32) or \n",
    "                            (len(sample) == 60) or (len(sample) == 64) or (len(sample) == 66) or (len(sample) == 68)) : #2byte timeword\n",
    "                \n",
    "                #seconds since 1970-01-01\n",
    "                if self.active_stream in ['sst']:\n",
    "                    #the correction is available for any non-utc setup pc\n",
    "                    time_base = date2num(datetime.datetime.strptime(IDNUMBER.config['Unit_Release_Time'],\n",
    "                                        '%Y-%m-%d %H:%M:%S'),\n",
    "                                                                    'seconds since 1970-1-1')\n",
    "                else:\n",
    "                    time_base = 0 \n",
    "\n",
    "                time = int(sample[0:4],16) * self.config['sample_interval'][self.active_stream] + time_base\n",
    "                \n",
    "                pressure =  self.PressureConversion(int(sample[4:8],16))  \n",
    "                \n",
    "                ttp_temp_ADC = signed_int(sample[8:12])\n",
    "                ttp_temp = self.TempConversion(engr_meas=ttp_temp_ADC,\n",
    "                                                  coefA=self.config['ttp_temp_cal']['Acoef'], \n",
    "                                                  coefB=self.config['ttp_temp_cal']['Bcoef'],\n",
    "                                                  coefC=self.config['ttp_temp_cal']['Ccoef'])\n",
    "\n",
    "                sst_temp_ADC = signed_int(sample[12:16])\n",
    "                sst_temp = self.TempConversion(engr_meas=sst_temp_ADC,\n",
    "                                                  coefA=self.config['sst_temp_cal']['Acoef'], \n",
    "                                                  coefB=self.config['sst_temp_cal']['Bcoef'],\n",
    "                                                  coefC=self.config['sst_temp_cal']['Ccoef'])\n",
    "\n",
    "                temp_ref = signed_int(sample[16:20])               \n",
    "                \n",
    "                rawpvalue = signed_int(sample[20:24])               \n",
    "                par = self.PARConversion(engr_meas=rawpvalue,\n",
    "                                        coef_offset=self.config['par_cal']['offset'], \n",
    "                                        coef_slope=self.config['par_cal']['slope']) \n",
    "                \n",
    "                rawfvalue = signed_int(sample[24:28])                 \n",
    "                fluor = self.FluorConversion(engr_meas=rawfvalue,\n",
    "                                        coef_offset=self.config['fluor_cal']['offset'], \n",
    "                                        coef_slope=self.config['fluor_cal']['slope'])  \n",
    "\n",
    "                tilt = int(sample[28:30],16) #degrees\n",
    "                \n",
    "            elif ((len(sample) == 34) or (len(sample) == 36) or (len(sample) == 72)) : #4byte timeword\n",
    "                \n",
    "                #seconds since 1970-01-01\n",
    "                time = int(sample[0:8],16)\n",
    "                \n",
    "                pressure =  self.PressureConversion(int(sample[8:12],16))   \n",
    "                \n",
    "                ttp_temp_ADC = signed_int(sample[12:16])\n",
    "                ttp_temp = self.TempConversion(engr_meas=ttp_temp_ADC,\n",
    "                                                  coefA=self.config['ttp_temp_cal']['Acoef'], \n",
    "                                                  coefB=self.config['ttp_temp_cal']['Bcoef'],\n",
    "                                                  coefC=self.config['ttp_temp_cal']['Ccoef'])\n",
    "\n",
    "                sst_temp_ADC = signed_int(sample[16:20])\n",
    "                sst_temp = self.TempConversion(engr_meas=sst_temp_ADC,\n",
    "                                                  coefA=self.config['sst_temp_cal']['Acoef'], \n",
    "                                                  coefB=self.config['sst_temp_cal']['Bcoef'],\n",
    "                                                  coefC=self.config['sst_temp_cal']['Ccoef'])\n",
    "\n",
    "                temp_ref = signed_int(sample[20:24])          \n",
    "                \n",
    "                rawpvalue = signed_int(sample[24:28])                 \n",
    "                par = self.PARConversion(engr_meas=rawpvalue,\n",
    "                                        coef_offset=self.config['par_cal']['offset'], \n",
    "                                        coef_slope=self.config['par_cal']['slope'])  \n",
    "\n",
    "                rawfvalue = signed_int(sample[28:32])               \n",
    "                fluor = self.FluorConversion(engr_meas=rawfvalue,\n",
    "                                        coef_offset=self.config['fluor_cal']['offset'], \n",
    "                                        coef_slope=self.config['fluor_cal']['slope'])  \n",
    "                \n",
    "                tilt = int(sample[32:34],16) #degrees            \n",
    "\n",
    "            elif len(sample) == 0:\n",
    "                continue\n",
    "            else:\n",
    "                continue # skip lines with too many data points\n",
    "            #save to dictionary\n",
    "            data[sample_num] = {'time':time,\n",
    "                                'pressure':pressure,\n",
    "                                'ttp_temp':ttp_temp,\n",
    "                                'ttp_temp_ADC':ttp_temp_ADC,\n",
    "                                'sst_temp':sst_temp,\n",
    "                                'sst_temp_ADC':sst_temp_ADC,\n",
    "                                'temp_ref':temp_ref,\n",
    "                                'par':par,\n",
    "                                'fluor':fluor,\n",
    "                                'tilt':tilt}  \n",
    "        return(data)\n",
    "\n",
    "    @staticmethod\n",
    "    def PARConversion(engr_meas,coef_offset, coef_slope):\n",
    "        ''' Calculate PAR from raw measurement\n",
    "        \n",
    "            (ADC_val - coef_offset) * coef_slope / 0.73\n",
    "\n",
    "            output is PAR in umolm-2s-1\n",
    "        '''\n",
    "        return((engr_meas - coef_offset) * coef_slope / 0.73 )\n",
    "\n",
    "    @staticmethod\n",
    "    def FluorConversion(engr_meas,coef_offset, coef_slope):\n",
    "        ''' Calculate Fluometer from raw measurement\n",
    "\n",
    "            (ADC_val - coef_offset) * coef_slope\n",
    "        \n",
    "            output is concentration in ug/L\n",
    "        '''\n",
    "        return((engr_meas - coef_offset) * coef_slope) \n",
    "\n",
    "    @staticmethod\n",
    "    def PressureConversion(engr_meas):\n",
    "        ''' Calculate Pressure from raw measurement\n",
    "\n",
    "            (ADC_val - 16384) * 10 / 32768\n",
    "        \n",
    "            output is Pressure in Bars\n",
    "        '''\n",
    "        return((engr_meas - 16384) * 10 / 32768)\n",
    "\n",
    "    @staticmethod\n",
    "    def TempConversion(engr_meas, coefA, coefB, coefC):\n",
    "        ''' Calculate Temperature from raw measurement.\n",
    "\n",
    "        1 / ( coefA + \n",
    "              coefB*np.log10(ADC_val) + \n",
    "              coefC*np.log10(ADC_val)^3 ) - 273.15 \n",
    "\n",
    "        Output is Temperature in DegC\n",
    "        '''\n",
    "        temperature = 1 / ( coefA + \n",
    "                     coefB*np.log10(engr_meas) + \n",
    "                     coefC*np.log10(engr_meas)**3 ) - 273.15        \n",
    "\n",
    "        return(temperature)        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sample Evaluation of routine\n",
    "\n",
    "Imagine a float with ID number **xxxxx**.  Instantiate a PuFs class with the relative (or absolute) path to the location of the download/reconstructed data files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "IDNUMBER = PuFs('..//results/' + imei + '/' + year)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load the configuration file.  If not specified it will load a file named 'default.yaml' in the same path as the utility"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "IDNUMBER.LoadCoefs(config_file=instconfig)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Call the routine to read and convert the binary file to a hex string... the sample parameter is the name of the data type.\n",
    "\n",
    "active_stream options are:\n",
    "+ bottom\n",
    "+ sst\n",
    "+ profile\n",
    "+ ice\n",
    "\n",
    "passing 'verbose=True' returns the hex string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "IDNUMBER.HexView(active_stream='bottom',verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FFFFF found\n"
     ]
    }
   ],
   "source": [
    "IDNUMBER.HexSplit(verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "bottom_data = IDNUMBER.Bottom(asPandas=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Convert elapse time to datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Deploy_Depth: 33\n",
      "Deploy_LatN: 63.8448\n",
      "Deploy_LonW: 167.7888\n",
      "Deployment_ID: 19BSITAE-TP1360\n",
      "ENG_SN: 137\n",
      "IMEI: 300434063861360\n",
      "Unit_Deploy_Time: '2019-09-28 19:02:00'\n",
      "Unit_Release_Time: '2020-10-31 00:00:00'\n",
      "Unit_Start_Time: '2019-10-1 00:00:00'\n",
      "fluor_cal:\n",
      "  offset: 0\n",
      "  slope: 0\n",
      "par_cal:\n",
      "  offset: 0\n",
      "  slope: 0\n",
      "sample_interval:\n",
      "  bottom: 3600\n",
      "  ice: 3600\n",
      "  sst: 3600\n",
      "sst_temp_cal:\n",
      "  Acoef: 0.0009161\n",
      "  Bcoef: 0.0006231\n",
      "  Ccoef: -2.648e-07\n",
      "ttp_temp_cal:\n",
      "  Acoef: 0.00217\n",
      "  Bcoef: 0.0001966\n",
      "  Ccoef: 7.036e-06\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#time functions are in netcdf4 library\n",
    "#Bottom and Ice data start marking time from the \"Unit_Start_Time\" and \"Unit_Release_Time\" which should be incorporated into the config file\n",
    "\n",
    "print(yaml.dump(IDNUMBER.config, default_flow_style=False))\n",
    "\n",
    "bottom_data['datetime'] =[num2date(x['time'],'seconds since '+ str(IDNUMBER.config['Unit_Start_Time']) ) for i,x in bottom_data.iterrows()]\n",
    "\n",
    "#Trim out deck data using deploy date in config file for output csv files\n",
    "\n",
    "bottom_data = bottom_data.drop(bottom_data[bottom_data['datetime'] < IDNUMBER.config['Unit_Deploy_Time']].index)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>pressure</th>\n",
       "      <th>ttp_temp</th>\n",
       "      <th>ttp_temp_ADC</th>\n",
       "      <th>sst_temp</th>\n",
       "      <th>sst_temp_ADC</th>\n",
       "      <th>temp_ref</th>\n",
       "      <th>par</th>\n",
       "      <th>fluor</th>\n",
       "      <th>tilt</th>\n",
       "      <th>datetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>3.159790</td>\n",
       "      <td>5.046419</td>\n",
       "      <td>21555</td>\n",
       "      <td>5.129747</td>\n",
       "      <td>21451</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2019-10-01 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3600</td>\n",
       "      <td>3.164062</td>\n",
       "      <td>5.065847</td>\n",
       "      <td>21534</td>\n",
       "      <td>5.149783</td>\n",
       "      <td>21430</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2019-10-01 01:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7200</td>\n",
       "      <td>3.147583</td>\n",
       "      <td>5.075106</td>\n",
       "      <td>21524</td>\n",
       "      <td>5.158377</td>\n",
       "      <td>21421</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2019-10-01 02:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10800</td>\n",
       "      <td>3.139343</td>\n",
       "      <td>5.091781</td>\n",
       "      <td>21506</td>\n",
       "      <td>5.174621</td>\n",
       "      <td>21404</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2019-10-01 03:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>14400</td>\n",
       "      <td>3.136902</td>\n",
       "      <td>5.134461</td>\n",
       "      <td>21460</td>\n",
       "      <td>5.219608</td>\n",
       "      <td>21357</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2019-10-01 04:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>18000</td>\n",
       "      <td>3.123474</td>\n",
       "      <td>5.047344</td>\n",
       "      <td>21554</td>\n",
       "      <td>5.131655</td>\n",
       "      <td>21449</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2019-10-01 05:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>21600</td>\n",
       "      <td>3.115234</td>\n",
       "      <td>4.996549</td>\n",
       "      <td>21609</td>\n",
       "      <td>5.078330</td>\n",
       "      <td>21505</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2019-10-01 06:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>25200</td>\n",
       "      <td>3.112488</td>\n",
       "      <td>4.940366</td>\n",
       "      <td>21670</td>\n",
       "      <td>5.021374</td>\n",
       "      <td>21565</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2019-10-01 07:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>28800</td>\n",
       "      <td>3.113403</td>\n",
       "      <td>4.948645</td>\n",
       "      <td>21661</td>\n",
       "      <td>5.029906</td>\n",
       "      <td>21556</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2019-10-01 08:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>32400</td>\n",
       "      <td>3.122559</td>\n",
       "      <td>4.925656</td>\n",
       "      <td>21686</td>\n",
       "      <td>5.005270</td>\n",
       "      <td>21582</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2019-10-01 09:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>36000</td>\n",
       "      <td>3.129883</td>\n",
       "      <td>4.906365</td>\n",
       "      <td>21707</td>\n",
       "      <td>4.985396</td>\n",
       "      <td>21603</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2019-10-01 10:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>39600</td>\n",
       "      <td>3.134460</td>\n",
       "      <td>4.911875</td>\n",
       "      <td>21701</td>\n",
       "      <td>4.991072</td>\n",
       "      <td>21597</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2019-10-01 11:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>43200</td>\n",
       "      <td>3.135681</td>\n",
       "      <td>4.925656</td>\n",
       "      <td>21686</td>\n",
       "      <td>5.005270</td>\n",
       "      <td>21582</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2019-10-01 12:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>46800</td>\n",
       "      <td>3.136597</td>\n",
       "      <td>4.916467</td>\n",
       "      <td>21696</td>\n",
       "      <td>4.996750</td>\n",
       "      <td>21591</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2019-10-01 13:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>50400</td>\n",
       "      <td>3.132019</td>\n",
       "      <td>4.897186</td>\n",
       "      <td>21717</td>\n",
       "      <td>4.975941</td>\n",
       "      <td>21613</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2019-10-01 14:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>54000</td>\n",
       "      <td>3.126526</td>\n",
       "      <td>4.828476</td>\n",
       "      <td>21792</td>\n",
       "      <td>4.906124</td>\n",
       "      <td>21687</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2019-10-01 15:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>57600</td>\n",
       "      <td>3.116760</td>\n",
       "      <td>4.780977</td>\n",
       "      <td>21844</td>\n",
       "      <td>4.857228</td>\n",
       "      <td>21739</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2019-10-01 16:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>61200</td>\n",
       "      <td>3.107605</td>\n",
       "      <td>4.825733</td>\n",
       "      <td>21795</td>\n",
       "      <td>4.901417</td>\n",
       "      <td>21692</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2019-10-01 17:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>64800</td>\n",
       "      <td>3.099670</td>\n",
       "      <td>4.778240</td>\n",
       "      <td>21847</td>\n",
       "      <td>4.855350</td>\n",
       "      <td>21741</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2019-10-01 18:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>68400</td>\n",
       "      <td>3.105774</td>\n",
       "      <td>4.699946</td>\n",
       "      <td>21933</td>\n",
       "      <td>4.777591</td>\n",
       "      <td>21824</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2019-10-01 19:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>72000</td>\n",
       "      <td>3.108826</td>\n",
       "      <td>4.640069</td>\n",
       "      <td>21999</td>\n",
       "      <td>4.714139</td>\n",
       "      <td>21892</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2019-10-01 20:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>75600</td>\n",
       "      <td>3.111877</td>\n",
       "      <td>4.599348</td>\n",
       "      <td>22044</td>\n",
       "      <td>4.670414</td>\n",
       "      <td>21939</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2019-10-01 21:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>79200</td>\n",
       "      <td>3.122253</td>\n",
       "      <td>4.567734</td>\n",
       "      <td>22079</td>\n",
       "      <td>4.637923</td>\n",
       "      <td>21974</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2019-10-01 22:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>82800</td>\n",
       "      <td>3.129883</td>\n",
       "      <td>4.561417</td>\n",
       "      <td>22086</td>\n",
       "      <td>4.631432</td>\n",
       "      <td>21981</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2019-10-01 23:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>86400</td>\n",
       "      <td>3.134766</td>\n",
       "      <td>4.565026</td>\n",
       "      <td>22082</td>\n",
       "      <td>4.635141</td>\n",
       "      <td>21977</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2019-10-02 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>90000</td>\n",
       "      <td>3.140564</td>\n",
       "      <td>4.578567</td>\n",
       "      <td>22067</td>\n",
       "      <td>4.649056</td>\n",
       "      <td>21962</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2019-10-02 01:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>93600</td>\n",
       "      <td>3.138123</td>\n",
       "      <td>4.601156</td>\n",
       "      <td>22042</td>\n",
       "      <td>4.672272</td>\n",
       "      <td>21937</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2019-10-02 02:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>97200</td>\n",
       "      <td>3.130798</td>\n",
       "      <td>4.606581</td>\n",
       "      <td>22036</td>\n",
       "      <td>4.677849</td>\n",
       "      <td>21931</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2019-10-02 03:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>100800</td>\n",
       "      <td>3.126221</td>\n",
       "      <td>4.628296</td>\n",
       "      <td>22012</td>\n",
       "      <td>4.700172</td>\n",
       "      <td>21907</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2019-10-02 04:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>104400</td>\n",
       "      <td>3.115540</td>\n",
       "      <td>4.666356</td>\n",
       "      <td>21970</td>\n",
       "      <td>4.739306</td>\n",
       "      <td>21865</td>\n",
       "      <td>8533</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2019-10-02 05:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3486</th>\n",
       "      <td>12546000</td>\n",
       "      <td>3.142700</td>\n",
       "      <td>-1.880009</td>\n",
       "      <td>30532</td>\n",
       "      <td>-1.831499</td>\n",
       "      <td>30421</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-23 05:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3487</th>\n",
       "      <td>12549600</td>\n",
       "      <td>3.140869</td>\n",
       "      <td>-1.879359</td>\n",
       "      <td>30531</td>\n",
       "      <td>-1.830861</td>\n",
       "      <td>30420</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-23 06:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3488</th>\n",
       "      <td>12553200</td>\n",
       "      <td>3.140869</td>\n",
       "      <td>-1.880659</td>\n",
       "      <td>30533</td>\n",
       "      <td>-1.832138</td>\n",
       "      <td>30422</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-23 07:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3489</th>\n",
       "      <td>12556800</td>\n",
       "      <td>3.144531</td>\n",
       "      <td>-1.880659</td>\n",
       "      <td>30533</td>\n",
       "      <td>-1.832138</td>\n",
       "      <td>30422</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-23 08:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3490</th>\n",
       "      <td>12560400</td>\n",
       "      <td>3.148193</td>\n",
       "      <td>-1.880659</td>\n",
       "      <td>30533</td>\n",
       "      <td>-1.832138</td>\n",
       "      <td>30422</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-23 09:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3491</th>\n",
       "      <td>12564000</td>\n",
       "      <td>3.148804</td>\n",
       "      <td>-1.880659</td>\n",
       "      <td>30533</td>\n",
       "      <td>-1.832776</td>\n",
       "      <td>30423</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-23 10:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3492</th>\n",
       "      <td>12567600</td>\n",
       "      <td>3.148499</td>\n",
       "      <td>-1.880659</td>\n",
       "      <td>30533</td>\n",
       "      <td>-1.832776</td>\n",
       "      <td>30423</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-23 11:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3493</th>\n",
       "      <td>12571200</td>\n",
       "      <td>3.146667</td>\n",
       "      <td>-1.881310</td>\n",
       "      <td>30534</td>\n",
       "      <td>-1.832776</td>\n",
       "      <td>30423</td>\n",
       "      <td>8531</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-23 12:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3494</th>\n",
       "      <td>12574800</td>\n",
       "      <td>3.144531</td>\n",
       "      <td>-1.881310</td>\n",
       "      <td>30534</td>\n",
       "      <td>-1.832776</td>\n",
       "      <td>30423</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-23 13:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3495</th>\n",
       "      <td>12578400</td>\n",
       "      <td>3.140259</td>\n",
       "      <td>-1.881310</td>\n",
       "      <td>30534</td>\n",
       "      <td>-1.832776</td>\n",
       "      <td>30423</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-23 14:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3496</th>\n",
       "      <td>12582000</td>\n",
       "      <td>3.136292</td>\n",
       "      <td>-1.880009</td>\n",
       "      <td>30532</td>\n",
       "      <td>-1.831499</td>\n",
       "      <td>30421</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2020-02-23 15:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3497</th>\n",
       "      <td>12585600</td>\n",
       "      <td>3.132324</td>\n",
       "      <td>-1.880659</td>\n",
       "      <td>30533</td>\n",
       "      <td>-1.832138</td>\n",
       "      <td>30422</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2020-02-23 16:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3498</th>\n",
       "      <td>12589200</td>\n",
       "      <td>3.129578</td>\n",
       "      <td>-1.881310</td>\n",
       "      <td>30534</td>\n",
       "      <td>-1.832776</td>\n",
       "      <td>30423</td>\n",
       "      <td>8531</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2020-02-23 17:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3499</th>\n",
       "      <td>12592800</td>\n",
       "      <td>3.133850</td>\n",
       "      <td>-1.881310</td>\n",
       "      <td>30534</td>\n",
       "      <td>-1.832776</td>\n",
       "      <td>30423</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-23 18:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3500</th>\n",
       "      <td>12596400</td>\n",
       "      <td>3.140869</td>\n",
       "      <td>-1.880659</td>\n",
       "      <td>30533</td>\n",
       "      <td>-1.832138</td>\n",
       "      <td>30422</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-23 19:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3501</th>\n",
       "      <td>12600000</td>\n",
       "      <td>3.147278</td>\n",
       "      <td>-1.880659</td>\n",
       "      <td>30533</td>\n",
       "      <td>-1.832138</td>\n",
       "      <td>30422</td>\n",
       "      <td>8531</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-23 20:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3502</th>\n",
       "      <td>12603600</td>\n",
       "      <td>3.155518</td>\n",
       "      <td>-1.880009</td>\n",
       "      <td>30532</td>\n",
       "      <td>-1.831499</td>\n",
       "      <td>30421</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-23 21:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3503</th>\n",
       "      <td>12607200</td>\n",
       "      <td>3.159790</td>\n",
       "      <td>-1.881310</td>\n",
       "      <td>30534</td>\n",
       "      <td>-1.832776</td>\n",
       "      <td>30423</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2020-02-23 22:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3504</th>\n",
       "      <td>12610800</td>\n",
       "      <td>3.164673</td>\n",
       "      <td>-1.881310</td>\n",
       "      <td>30534</td>\n",
       "      <td>-1.832138</td>\n",
       "      <td>30422</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-23 23:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3505</th>\n",
       "      <td>12614400</td>\n",
       "      <td>3.166809</td>\n",
       "      <td>-1.880009</td>\n",
       "      <td>30532</td>\n",
       "      <td>-1.831499</td>\n",
       "      <td>30421</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-24 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3506</th>\n",
       "      <td>12618000</td>\n",
       "      <td>3.166504</td>\n",
       "      <td>-1.880009</td>\n",
       "      <td>30532</td>\n",
       "      <td>-1.831499</td>\n",
       "      <td>30421</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-24 01:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3507</th>\n",
       "      <td>12621600</td>\n",
       "      <td>3.161621</td>\n",
       "      <td>-1.878709</td>\n",
       "      <td>30530</td>\n",
       "      <td>-1.830223</td>\n",
       "      <td>30419</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-24 02:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3508</th>\n",
       "      <td>12625200</td>\n",
       "      <td>3.154602</td>\n",
       "      <td>-1.878709</td>\n",
       "      <td>30530</td>\n",
       "      <td>-1.830223</td>\n",
       "      <td>30419</td>\n",
       "      <td>8531</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-24 03:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3509</th>\n",
       "      <td>12628800</td>\n",
       "      <td>3.148193</td>\n",
       "      <td>-1.879359</td>\n",
       "      <td>30531</td>\n",
       "      <td>-1.830861</td>\n",
       "      <td>30420</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-24 04:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3510</th>\n",
       "      <td>12632400</td>\n",
       "      <td>3.145142</td>\n",
       "      <td>-1.880009</td>\n",
       "      <td>30532</td>\n",
       "      <td>-1.831499</td>\n",
       "      <td>30421</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-24 05:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3511</th>\n",
       "      <td>12636000</td>\n",
       "      <td>3.141174</td>\n",
       "      <td>-1.880659</td>\n",
       "      <td>30533</td>\n",
       "      <td>-1.831499</td>\n",
       "      <td>30421</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2020-02-24 06:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3512</th>\n",
       "      <td>12639600</td>\n",
       "      <td>3.140259</td>\n",
       "      <td>-1.880659</td>\n",
       "      <td>30533</td>\n",
       "      <td>-1.831499</td>\n",
       "      <td>30421</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-24 07:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3513</th>\n",
       "      <td>12643200</td>\n",
       "      <td>3.143921</td>\n",
       "      <td>-1.880009</td>\n",
       "      <td>30532</td>\n",
       "      <td>-1.831499</td>\n",
       "      <td>30421</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-24 08:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3514</th>\n",
       "      <td>12646800</td>\n",
       "      <td>3.145752</td>\n",
       "      <td>-1.880659</td>\n",
       "      <td>30533</td>\n",
       "      <td>-1.832138</td>\n",
       "      <td>30422</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-24 09:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3515</th>\n",
       "      <td>12650400</td>\n",
       "      <td>3.150024</td>\n",
       "      <td>-1.880009</td>\n",
       "      <td>30532</td>\n",
       "      <td>-1.831499</td>\n",
       "      <td>30421</td>\n",
       "      <td>8532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2020-02-24 10:00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3515 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          time  pressure  ttp_temp  ttp_temp_ADC  sst_temp  sst_temp_ADC  \\\n",
       "1            0  3.159790  5.046419         21555  5.129747         21451   \n",
       "2         3600  3.164062  5.065847         21534  5.149783         21430   \n",
       "3         7200  3.147583  5.075106         21524  5.158377         21421   \n",
       "4        10800  3.139343  5.091781         21506  5.174621         21404   \n",
       "5        14400  3.136902  5.134461         21460  5.219608         21357   \n",
       "6        18000  3.123474  5.047344         21554  5.131655         21449   \n",
       "7        21600  3.115234  4.996549         21609  5.078330         21505   \n",
       "8        25200  3.112488  4.940366         21670  5.021374         21565   \n",
       "9        28800  3.113403  4.948645         21661  5.029906         21556   \n",
       "10       32400  3.122559  4.925656         21686  5.005270         21582   \n",
       "11       36000  3.129883  4.906365         21707  4.985396         21603   \n",
       "12       39600  3.134460  4.911875         21701  4.991072         21597   \n",
       "13       43200  3.135681  4.925656         21686  5.005270         21582   \n",
       "14       46800  3.136597  4.916467         21696  4.996750         21591   \n",
       "15       50400  3.132019  4.897186         21717  4.975941         21613   \n",
       "16       54000  3.126526  4.828476         21792  4.906124         21687   \n",
       "17       57600  3.116760  4.780977         21844  4.857228         21739   \n",
       "18       61200  3.107605  4.825733         21795  4.901417         21692   \n",
       "19       64800  3.099670  4.778240         21847  4.855350         21741   \n",
       "20       68400  3.105774  4.699946         21933  4.777591         21824   \n",
       "21       72000  3.108826  4.640069         21999  4.714139         21892   \n",
       "22       75600  3.111877  4.599348         22044  4.670414         21939   \n",
       "23       79200  3.122253  4.567734         22079  4.637923         21974   \n",
       "24       82800  3.129883  4.561417         22086  4.631432         21981   \n",
       "25       86400  3.134766  4.565026         22082  4.635141         21977   \n",
       "26       90000  3.140564  4.578567         22067  4.649056         21962   \n",
       "27       93600  3.138123  4.601156         22042  4.672272         21937   \n",
       "28       97200  3.130798  4.606581         22036  4.677849         21931   \n",
       "29      100800  3.126221  4.628296         22012  4.700172         21907   \n",
       "30      104400  3.115540  4.666356         21970  4.739306         21865   \n",
       "...        ...       ...       ...           ...       ...           ...   \n",
       "3486  12546000  3.142700 -1.880009         30532 -1.831499         30421   \n",
       "3487  12549600  3.140869 -1.879359         30531 -1.830861         30420   \n",
       "3488  12553200  3.140869 -1.880659         30533 -1.832138         30422   \n",
       "3489  12556800  3.144531 -1.880659         30533 -1.832138         30422   \n",
       "3490  12560400  3.148193 -1.880659         30533 -1.832138         30422   \n",
       "3491  12564000  3.148804 -1.880659         30533 -1.832776         30423   \n",
       "3492  12567600  3.148499 -1.880659         30533 -1.832776         30423   \n",
       "3493  12571200  3.146667 -1.881310         30534 -1.832776         30423   \n",
       "3494  12574800  3.144531 -1.881310         30534 -1.832776         30423   \n",
       "3495  12578400  3.140259 -1.881310         30534 -1.832776         30423   \n",
       "3496  12582000  3.136292 -1.880009         30532 -1.831499         30421   \n",
       "3497  12585600  3.132324 -1.880659         30533 -1.832138         30422   \n",
       "3498  12589200  3.129578 -1.881310         30534 -1.832776         30423   \n",
       "3499  12592800  3.133850 -1.881310         30534 -1.832776         30423   \n",
       "3500  12596400  3.140869 -1.880659         30533 -1.832138         30422   \n",
       "3501  12600000  3.147278 -1.880659         30533 -1.832138         30422   \n",
       "3502  12603600  3.155518 -1.880009         30532 -1.831499         30421   \n",
       "3503  12607200  3.159790 -1.881310         30534 -1.832776         30423   \n",
       "3504  12610800  3.164673 -1.881310         30534 -1.832138         30422   \n",
       "3505  12614400  3.166809 -1.880009         30532 -1.831499         30421   \n",
       "3506  12618000  3.166504 -1.880009         30532 -1.831499         30421   \n",
       "3507  12621600  3.161621 -1.878709         30530 -1.830223         30419   \n",
       "3508  12625200  3.154602 -1.878709         30530 -1.830223         30419   \n",
       "3509  12628800  3.148193 -1.879359         30531 -1.830861         30420   \n",
       "3510  12632400  3.145142 -1.880009         30532 -1.831499         30421   \n",
       "3511  12636000  3.141174 -1.880659         30533 -1.831499         30421   \n",
       "3512  12639600  3.140259 -1.880659         30533 -1.831499         30421   \n",
       "3513  12643200  3.143921 -1.880009         30532 -1.831499         30421   \n",
       "3514  12646800  3.145752 -1.880659         30533 -1.832138         30422   \n",
       "3515  12650400  3.150024 -1.880009         30532 -1.831499         30421   \n",
       "\n",
       "      temp_ref  par  fluor  tilt            datetime  \n",
       "1         8533  0.0      0     7 2019-10-01 00:00:00  \n",
       "2         8533  0.0      0     6 2019-10-01 01:00:00  \n",
       "3         8533  0.0      0     7 2019-10-01 02:00:00  \n",
       "4         8533  0.0      0     6 2019-10-01 03:00:00  \n",
       "5         8533  0.0      0     8 2019-10-01 04:00:00  \n",
       "6         8533  0.0      0     8 2019-10-01 05:00:00  \n",
       "7         8533  0.0      0     5 2019-10-01 06:00:00  \n",
       "8         8533  0.0      0     9 2019-10-01 07:00:00  \n",
       "9         8533  0.0      0     8 2019-10-01 08:00:00  \n",
       "10        8533  0.0      0     7 2019-10-01 09:00:00  \n",
       "11        8533  0.0      0     6 2019-10-01 10:00:00  \n",
       "12        8533  0.0      0     7 2019-10-01 11:00:00  \n",
       "13        8533  0.0      0     6 2019-10-01 12:00:00  \n",
       "14        8533  0.0      0     6 2019-10-01 13:00:00  \n",
       "15        8533  0.0      0     8 2019-10-01 14:00:00  \n",
       "16        8533  0.0      0     7 2019-10-01 15:00:00  \n",
       "17        8533  0.0      0     7 2019-10-01 16:00:00  \n",
       "18        8533  0.0      0     7 2019-10-01 17:00:00  \n",
       "19        8533  0.0      0     8 2019-10-01 18:00:00  \n",
       "20        8533  0.0      0     7 2019-10-01 19:00:00  \n",
       "21        8533  0.0      0     6 2019-10-01 20:00:00  \n",
       "22        8533  0.0      0     7 2019-10-01 21:00:00  \n",
       "23        8533  0.0      0     7 2019-10-01 22:00:00  \n",
       "24        8533  0.0      0     6 2019-10-01 23:00:00  \n",
       "25        8533  0.0      0     8 2019-10-02 00:00:00  \n",
       "26        8533  0.0      0     7 2019-10-02 01:00:00  \n",
       "27        8533  0.0      0     6 2019-10-02 02:00:00  \n",
       "28        8533  0.0      0     7 2019-10-02 03:00:00  \n",
       "29        8533  0.0      0     7 2019-10-02 04:00:00  \n",
       "30        8533  0.0      0     5 2019-10-02 05:00:00  \n",
       "...        ...  ...    ...   ...                 ...  \n",
       "3486      8532  0.0      0     8 2020-02-23 05:00:00  \n",
       "3487      8532  0.0      0     8 2020-02-23 06:00:00  \n",
       "3488      8532  0.0      0     8 2020-02-23 07:00:00  \n",
       "3489      8532  0.0      0     8 2020-02-23 08:00:00  \n",
       "3490      8532  0.0      0     8 2020-02-23 09:00:00  \n",
       "3491      8532  0.0      0     8 2020-02-23 10:00:00  \n",
       "3492      8532  0.0      0     8 2020-02-23 11:00:00  \n",
       "3493      8531  0.0      0     8 2020-02-23 12:00:00  \n",
       "3494      8532  0.0      0     8 2020-02-23 13:00:00  \n",
       "3495      8532  0.0      0     8 2020-02-23 14:00:00  \n",
       "3496      8532  0.0      0     9 2020-02-23 15:00:00  \n",
       "3497      8532  0.0      0     9 2020-02-23 16:00:00  \n",
       "3498      8531  0.0      0     7 2020-02-23 17:00:00  \n",
       "3499      8532  0.0      0     8 2020-02-23 18:00:00  \n",
       "3500      8532  0.0      0     8 2020-02-23 19:00:00  \n",
       "3501      8531  0.0      0     8 2020-02-23 20:00:00  \n",
       "3502      8532  0.0      0     8 2020-02-23 21:00:00  \n",
       "3503      8532  0.0      0     7 2020-02-23 22:00:00  \n",
       "3504      8532  0.0      0     8 2020-02-23 23:00:00  \n",
       "3505      8532  0.0      0     8 2020-02-24 00:00:00  \n",
       "3506      8532  0.0      0     8 2020-02-24 01:00:00  \n",
       "3507      8532  0.0      0     8 2020-02-24 02:00:00  \n",
       "3508      8531  0.0      0     8 2020-02-24 03:00:00  \n",
       "3509      8532  0.0      0     8 2020-02-24 04:00:00  \n",
       "3510      8532  0.0      0     8 2020-02-24 05:00:00  \n",
       "3511      8532  0.0      0     7 2020-02-24 06:00:00  \n",
       "3512      8532  0.0      0     8 2020-02-24 07:00:00  \n",
       "3513      8532  0.0      0     8 2020-02-24 08:00:00  \n",
       "3514      8532  0.0      0     8 2020-02-24 09:00:00  \n",
       "3515      8532  0.0      0     8 2020-02-24 10:00:00  \n",
       "\n",
       "[3515 rows x 11 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bottom_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Bottom Temp Detail*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(bottom_data.datetime,bottom_data.ttp_temp, label='ttp fast response temp')\n",
    "plt.plot(bottom_data.datetime,bottom_data.sst_temp, label='sst slow response temp')\n",
    "plt.ylabel('Temp C')\n",
    "plt.xlabel('Date')\n",
    "plt.title(imei)\n",
    "plt.xticks(rotation=30)\n",
    "plt.legend(loc='upper right')\n",
    "\n",
    "plt.savefig( '..//results/'+imei + '/'+year + '/' + imei+'_bottom_data.png',dpi=600)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Saving Data to be used in other software\n",
    "\n",
    "simple as sending the pandas dataframe to csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "#add id,lat,lon from config to datafiles\n",
    "try:\n",
    "    bottom_data['id'] = IDNUMBER.config['IMEI']\n",
    "    bottom_data['dep_lat'] = IDNUMBER.config['Deploy_LatN']\n",
    "    bottom_data['dep_lon'] = IDNUMBER.config['Deploy_LonW']\n",
    "    bottom_data.to_csv( '..//results/'+imei + '/'+year + '/' + imei+'_bottom_data.csv')\n",
    "except:\n",
    "    print(\"No bottom data\")  \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
